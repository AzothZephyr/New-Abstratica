{"remainingRequest":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js!/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js??ref--14-0!/Users/aaronh/Downloads/abstratica-web/src/lib/wallet/sollet.js","dependencies":[{"path":"/Users/aaronh/Downloads/abstratica-web/src/lib/wallet/sollet.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/babel.config.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/cache-loader/dist/cjs.js","mtime":1693191335836},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js","mtime":1693191336222},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js","mtime":1693191335906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/aaronh/Downloads/abstratica-web/src/lib/wallet/sollet.js"],"names":["EventEmitter","PublicKey","bs58","SolletURL","SolletWalletAdapter","_network","provider","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_a","_injectedProvider","source","window","origin","_providerUrl","data","method","newPublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","isInjectedProvider","isString","URL","hash","URLSearchParams","location","network","toString","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","_b","_c","_d","set","postMessage","jsonrpc","Object","assign","focus","close","handleConnect","display","Uint8Array","response","signature","decode","transaction","message","encode","serializeMessage","addSignature","transactions","messages","map","tx","signatures","s","idx","a","isObject"],"mappings":"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","sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nexport const SolletURL = \"https://www.sollet.io\";\nexport class SolletWalletAdapter extends EventEmitter {\n  constructor(_network, provider) {\n    provider = provider || SolletURL;\n    super();\n    this._network = _network;\n    this._publicKey = null;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._autoApprove = false;\n    this._responsePromises = new Map();\n    this.handleMessage = (e) => {\n      var _a;\n      if (\n        (this._injectedProvider && e.source === window) ||\n        (e.origin ===\n          ((_a = this._providerUrl) === null || _a === void 0\n            ? void 0\n            : _a.origin) &&\n          e.source === this._popup)\n      ) {\n        if (e.data.method === \"connected\") {\n          const newPublicKey = new PublicKey(e.data.params.publicKey);\n          if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n            if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n              this.handleDisconnect();\n            }\n            this._publicKey = newPublicKey;\n            this._autoApprove = !!e.data.params.autoApprove;\n            this.emit(\"connect\", this._publicKey);\n          }\n        } else if (e.data.method === \"disconnected\") {\n          this.handleDisconnect();\n        } else if (e.data.result || e.data.error) {\n          const promises = this._responsePromises.get(e.data.id);\n          if (promises) {\n            const [resolve, reject] = promises;\n            if (e.data.result) {\n              resolve(e.data.result);\n            } else {\n              reject(new Error(e.data.error));\n            }\n          }\n        }\n      }\n    };\n    this._beforeUnload = () => {\n      void this.disconnect();\n    };\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        \"provider parameter must be an injected provider or a URL string.\"\n      );\n    }\n  }\n  handleConnect() {\n    var _a;\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener(\"message\", this.handleMessage);\n      window.addEventListener(\"beforeunload\", this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise((resolve) => {\n        void this.sendRequest(\"connect\", {});\n        resolve();\n      });\n    } else {\n      window.name = \"parent\";\n      this._popup = window.open(\n        (_a = this._providerUrl) === null || _a === void 0\n          ? void 0\n          : _a.toString(),\n        \"_blank\",\n        \"location,resizable,width=460,height=675\"\n      );\n      return new Promise((resolve) => {\n        this.once(\"connect\", resolve);\n      });\n    }\n  }\n  handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener(\"message\", this.handleMessage);\n      window.removeEventListener(\"beforeunload\", this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit(\"disconnect\");\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error(\"Wallet disconnected\"));\n    });\n  }\n  async sendRequest(method, params) {\n    if (method !== \"connect\" && !this.connected) {\n      throw new Error(\"Wallet not connected\");\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      var _a, _b, _c, _d;\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: \"2.0\",\n          id: requestId,\n          method,\n          params: Object.assign({ network: this._network }, params),\n        });\n      } else {\n        (_a = this._popup) === null || _a === void 0\n          ? void 0\n          : _a.postMessage(\n              {\n                jsonrpc: \"2.0\",\n                id: requestId,\n                method,\n                params,\n              },\n              (_c =\n                (_b = this._providerUrl) === null || _b === void 0\n                  ? void 0\n                  : _b.origin) !== null && _c !== void 0\n                ? _c\n                : \"\"\n            );\n        if (!this.autoApprove) {\n          (_d = this._popup) === null || _d === void 0 ? void 0 : _d.focus();\n        }\n      }\n    });\n  }\n  get publicKey() {\n    return this._publicKey;\n  }\n  get connected() {\n    return this._publicKey !== null;\n  }\n  get autoApprove() {\n    return this._autoApprove;\n  }\n  async connect() {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n  async disconnect() {\n    if (this._injectedProvider) {\n      await this.sendRequest(\"disconnect\", {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n  async sign(data, display) {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error(\"Data must be an instance of Uint8Array\");\n    }\n    const response = await this.sendRequest(\"sign\", {\n      data,\n      display,\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n  async signTransaction(transaction) {\n    const response = await this.sendRequest(\"signTransaction\", {\n      message: bs58.encode(transaction.serializeMessage()),\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n  async signAllTransactions(transactions) {\n    const response = await this.sendRequest(\"signAllTransactions\", {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    });\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n}\nfunction isString(a) {\n  return typeof a === \"string\";\n}\nfunction isInjectedProvider(a) {\n  return (\n    isObject(a) && \"postMessage\" in a && typeof a.postMessage === \"function\"\n  );\n}\nfunction isObject(a) {\n  return typeof a === \"object\" && a !== null;\n}\n"]}]}