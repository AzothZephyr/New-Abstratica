{"remainingRequest":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js!/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js??ref--14-0!/Users/aaronh/Downloads/abstratica-web/src/lib/metadata-helper/metadata2.js","dependencies":[{"path":"/Users/aaronh/Downloads/abstratica-web/src/lib/metadata-helper/metadata2.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/babel.config.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/cache-loader/dist/cjs.js","mtime":1693191335836},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js","mtime":1693191336222},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js","mtime":1693191335906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hYXJvbmgvRG93bmxvYWRzL2Fic3RyYXRpY2Etd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IHsgbmV0d29ya0Nvbm5lY3Rpb24sIGNyZWF0b3IgfSBmcm9tICIuLi9jb25uZWN0aW9uIjsKaW1wb3J0IHsgcHJvZ3JhbUlkcyB9IGZyb20gIi4vaWRzLmpzIjsKaW1wb3J0IHsgTUFYX0NSRUFUT1JfTEVOLCBNQVhfTkFNRV9MRU5HVEgsIE1BWF9TWU1CT0xfTEVOR1RILCBNQVhfVVJJX0xFTkdUSCB9IGZyb20gIi4vZGF0YS1zcGVjcy5qcyI7CmltcG9ydCB7IGRlY29kZU1ldGFkYXRhIH0gZnJvbSAiLi9tZXRhZGF0YSI7CmltcG9ydCB7IE1ldGFkYXRhS2V5IH0gZnJvbSAiLi9kYXRhbGF5b3V0LmpzIjsKZXhwb3J0IGZ1bmN0aW9uIGxvYWRBYnNPcHRpbWl6ZWQoKSB7CiAgcmV0dXJuIF9sb2FkQWJzT3B0aW1pemVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0gLy8gY29ubmVjdGlvbjogQ29ubmVjdGlvbiwKLy8gcHJvZ3JhbUlkOiBTdHJpbmdQdWJsaWNLZXksCi8vIGNvbmZpZ09yQ29tbWl0bWVudD86IGFueSwKCmZ1bmN0aW9uIF9sb2FkQWJzT3B0aW1pemVkKCkgewogIF9sb2FkQWJzT3B0aW1pemVkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgdmFyIGZpbHRlciwgZGVjb2RlZE1ldGE7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGZpbHRlciA9IHsKICAgICAgICAgICAgICBmaWx0ZXJzOiBbewogICAgICAgICAgICAgICAgbWVtY21wOiB7CiAgICAgICAgICAgICAgICAgIG9mZnNldDogMSArIC8vIGtleQogICAgICAgICAgICAgICAgICAzMiArIC8vIHVwZGF0ZSBhdXRoCiAgICAgICAgICAgICAgICAgIDMyICsgLy8gbWludAogICAgICAgICAgICAgICAgICA0ICsgLy8gbmFtZSBzdHJpbmcgbGVuZ3RoCiAgICAgICAgICAgICAgICAgIE1BWF9OQU1FX0xFTkdUSCArIC8vIG5hbWUKICAgICAgICAgICAgICAgICAgNCArIC8vIHVyaSBzdHJpbmcgbGVuZ3RoCiAgICAgICAgICAgICAgICAgIE1BWF9VUklfTEVOR1RIICsgLy8gdXJpCiAgICAgICAgICAgICAgICAgIDQgKyAvLyBzeW1ib2wgc3RyaW5nIGxlbmd0aAogICAgICAgICAgICAgICAgICBNQVhfU1lNQk9MX0xFTkdUSCArIC8vIHN5bWJvbAogICAgICAgICAgICAgICAgICAyICsgLy8gc2VsbGVyIGZlZSBiYXNpcyBwb2ludHMKICAgICAgICAgICAgICAgICAgMSArIC8vIHdoZXRoZXIgb3Igbm90IHRoZXJlIGlzIGEgY3JlYXRvcnMgdmVjCiAgICAgICAgICAgICAgICAgIDQgKyAvLyBjcmVhdG9ycyB2ZWMgbGVuZ3RoCiAgICAgICAgICAgICAgICAgIDAgKiBNQVhfQ1JFQVRPUl9MRU4sCiAgICAgICAgICAgICAgICAgIGJ5dGVzOiBjcmVhdG9yLnRvQmFzZTU4KCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGdldFByb2dyYW1BY2NvdW50c09wdGltaXplZChwcm9ncmFtSWRzKCkubWV0YWRhdGEsIGZpbHRlcik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBkZWNvZGVkTWV0YSA9IF9jb250ZXh0LnNlbnQuZmlsdGVyKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEuYWNjb3VudC5kYXRhWzBdID09PSBNZXRhZGF0YUtleS5NZXRhZGF0YVYxS2V5ICYmIGEuYWNjb3VudC5vd25lciA9PT0gcHJvZ3JhbUlkcygpLm1ldGFkYXRhLnRvQmFzZTU4KCk7CiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAobSkgewogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBkZWNvZGVkRGF0YTogZGVjb2RlTWV0YWRhdGEobS5hY2NvdW50LmRhdGEpLAogICAgICAgICAgICAgICAgbWV0YWRhdGE6IG0ucHVia2V5CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGRlY29kZWRNZXRhKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfbG9hZEFic09wdGltaXplZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBnZXRQcm9ncmFtQWNjb3VudHNPcHRpbWl6ZWQoX3gsIF94MikgewogIHJldHVybiBfZ2V0UHJvZ3JhbUFjY291bnRzT3B0aW1pemVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRQcm9ncmFtQWNjb3VudHNPcHRpbWl6ZWQoKSB7CiAgX2dldFByb2dyYW1BY2NvdW50c09wdGltaXplZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocHJvZ3JhbUlkLCBjb25maWdPckNvbW1pdG1lbnQpIHsKICAgIHZhciBleHRyYSwgY29tbWl0bWVudCwgYXJncywgdW5zYWZlUmVzLCBkYXRhOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgZXh0cmEgPSB7fTsKCiAgICAgICAgICAgIC8vICAgbGV0IGVuY29kaW5nOwogICAgICAgICAgICBpZiAoY29uZmlnT3JDb21taXRtZW50KSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25maWdPckNvbW1pdG1lbnQgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBjb21taXRtZW50ID0gY29uZmlnT3JDb21taXRtZW50OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb21taXRtZW50ID0gY29uZmlnT3JDb21taXRtZW50LmNvbW1pdG1lbnQ7IC8vICAgZW5jb2RpbmcgPSBjb25maWdPckNvbW1pdG1lbnQuZW5jb2Rpbmc7CgogICAgICAgICAgICAgICAgaWYgKGNvbmZpZ09yQ29tbWl0bWVudC5kYXRhU2xpY2UpIHsKICAgICAgICAgICAgICAgICAgZXh0cmEuZGF0YVNsaWNlID0gY29uZmlnT3JDb21taXRtZW50LmRhdGFTbGljZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoY29uZmlnT3JDb21taXRtZW50LmZpbHRlcnMpIHsKICAgICAgICAgICAgICAgICAgZXh0cmEuZmlsdGVycyA9IGNvbmZpZ09yQ29tbWl0bWVudC5maWx0ZXJzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgYXJncyA9IG5ldHdvcmtDb25uZWN0aW9uLl9idWlsZEFyZ3MoW3Byb2dyYW1JZC50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCwgImJhc2U2NCIsIGV4dHJhKTsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gbmV0d29ya0Nvbm5lY3Rpb24uX3JwY1JlcXVlc3QoImdldFByb2dyYW1BY2NvdW50cyIsIGFyZ3MpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgdW5zYWZlUmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2codW5zYWZlUmVzKTsKICAgICAgICAgICAgZGF0YSA9IHVuc2FmZVJlcy5yZXN1bHQubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGFjY291bnQ6IHsKICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcG9zc2libGUgZGVsYXkgcGFyc2luZyBjb3VsZCBiZSBhZGRlZCBoZXJlCiAgICAgICAgICAgICAgICAgIGRhdGE6IEJ1ZmZlci5mcm9tKGl0ZW0uYWNjb3VudC5kYXRhWzBdLCAiYmFzZTY0IiksCiAgICAgICAgICAgICAgICAgIGV4ZWN1dGFibGU6IGl0ZW0uYWNjb3VudC5leGVjdXRhYmxlLAogICAgICAgICAgICAgICAgICBsYW1wb3J0czogaXRlbS5hY2NvdW50LmxhbXBvcnRzLAogICAgICAgICAgICAgICAgICAvLyBUT0RPOiBtYXliZSB3ZSBjYW4gZG8gaXQgaW4gbGF6eSB3YXk/IG9yIGp1c3QgdXNlIHN0cmluZwogICAgICAgICAgICAgICAgICBvd25lcjogaXRlbS5hY2NvdW50Lm93bmVyCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcHVia2V5OiBpdGVtLnB1YmtleQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgZGF0YSk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwogIHJldHVybiBfZ2V0UHJvZ3JhbUFjY291bnRzT3B0aW1pemVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0="},{"version":3,"sources":["/Users/aaronh/Downloads/abstratica-web/src/lib/metadata-helper/metadata2.js"],"names":["networkConnection","creator","programIds","MAX_CREATOR_LEN","MAX_NAME_LENGTH","MAX_SYMBOL_LENGTH","MAX_URI_LENGTH","decodeMetadata","MetadataKey","loadAbsOptimized","filter","filters","memcmp","offset","bytes","toBase58","getProgramAccountsOptimized","metadata","decodedMeta","a","account","data","MetadataV1Key","owner","map","m","decodedData","pubkey","programId","configOrCommitment","extra","commitment","dataSlice","args","_buildArgs","_rpcRequest","unsafeRes","result","item","Buffer","from","executable","lamports"],"mappings":"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","sourcesContent":["import { networkConnection, creator } from \"../connection\";\nimport { programIds } from \"./ids.js\";\nimport {\n  MAX_CREATOR_LEN,\n  MAX_NAME_LENGTH,\n  MAX_SYMBOL_LENGTH,\n  MAX_URI_LENGTH,\n} from \"./data-specs.js\";\nimport { decodeMetadata } from \"./metadata\";\nimport { MetadataKey } from \"./datalayout.js\";\n\nexport async function loadAbsOptimized() {\n  const filter = {\n    filters: [\n      {\n        memcmp: {\n          offset:\n            1 + // key\n            32 + // update auth\n            32 + // mint\n            4 + // name string length\n            MAX_NAME_LENGTH + // name\n            4 + // uri string length\n            MAX_URI_LENGTH + // uri\n            4 + // symbol string length\n            MAX_SYMBOL_LENGTH + // symbol\n            2 + // seller fee basis points\n            1 + // whether or not there is a creators vec\n            4 + // creators vec length\n            0 * MAX_CREATOR_LEN,\n          bytes: creator.toBase58(),\n        },\n      },\n    ],\n  };\n\n  const decodedMeta = (\n    await getProgramAccountsOptimized(programIds().metadata, filter)\n  )\n    .filter(\n      (a) =>\n        a.account.data[0] === MetadataKey.MetadataV1Key &&\n        a.account.owner === programIds().metadata.toBase58()\n    )\n    .map((m) => {\n      return {\n        decodedData: decodeMetadata(m.account.data),\n        metadata: m.pubkey,\n      };\n    });\n  return decodedMeta;\n}\n\n// connection: Connection,\n// programId: StringPublicKey,\n// configOrCommitment?: any,\n\nasync function getProgramAccountsOptimized(programId, configOrCommitment) {\n  const extra = {};\n  let commitment;\n  //   let encoding;\n\n  if (configOrCommitment) {\n    if (typeof configOrCommitment === \"string\") {\n      commitment = configOrCommitment;\n    } else {\n      commitment = configOrCommitment.commitment;\n      //   encoding = configOrCommitment.encoding;\n\n      if (configOrCommitment.dataSlice) {\n        extra.dataSlice = configOrCommitment.dataSlice;\n      }\n\n      if (configOrCommitment.filters) {\n        extra.filters = configOrCommitment.filters;\n      }\n    }\n  }\n\n  const args = networkConnection._buildArgs(\n    [programId.toBase58()],\n    commitment,\n    \"base64\",\n    extra\n  );\n  const unsafeRes = await networkConnection._rpcRequest(\n    \"getProgramAccounts\",\n    args\n  );\n  //   console.log(unsafeRes);\n  const data = unsafeRes.result.map((item) => {\n    return {\n      account: {\n        // TODO: possible delay parsing could be added here\n        data: Buffer.from(item.account.data[0], \"base64\"),\n        executable: item.account.executable,\n        lamports: item.account.lamports,\n        // TODO: maybe we can do it in lazy way? or just use string\n        owner: item.account.owner,\n      },\n      pubkey: item.pubkey,\n    };\n  });\n\n  return data;\n}\n"]}]}