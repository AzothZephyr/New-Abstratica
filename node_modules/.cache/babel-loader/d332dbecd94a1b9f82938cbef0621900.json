{"remainingRequest":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js!/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js??ref--14-0!/Users/aaronh/Downloads/abstratica-web/src/lib/metadata-helper/metadata.js","dependencies":[{"path":"/Users/aaronh/Downloads/abstratica-web/src/lib/metadata-helper/metadata.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/babel.config.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/cache-loader/dist/cjs.js","mtime":1693191335836},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js","mtime":1693191336222},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js","mtime":1693191335906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/aaronh/Downloads/abstratica-web/src/lib/metadata-helper/metadata.js"],"names":["programIds","PublicKey","deserializeUnchecked","METADATA_SCHEMA","Metadata","networkConnection","creator","METADATA_PREFIX","getNFTOwner","metadata","getMetadata","name","uri","mint","symbol","royalties","getTokenLargestAccounts","holders","value","length","Error","splAccount","address","getParsedAccountInfo","parsedAccountInfo","nftOwner","data","parsed","info","owner","toBase58","connection","publicKey","Object","getAccountInfo","accountData","decoded","decodeMetadata","updateAuthority","sellerFeeBasisPoints","getMetadataByMint","tokenMint","getMetadataAccount","PROGRAM_IDS","findProgramAddress","Buffer","from","toBuffer","buffer","seeds","programId","key","reduce","agg","item","toString","cached","localStorage","getItem","JSON","parse","parseInt","nonce","result","setItem","stringify"],"mappings":"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","sourcesContent":["import { programIds } from \"./ids.js\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { deserializeUnchecked } from \"borsh\";\r\nimport { METADATA_SCHEMA, Metadata } from \"./datalayout.js\";\r\nimport { networkConnection, creator } from \"../connection\";\r\n\r\nexport const METADATA_PREFIX = \"metadata\";\r\n\r\nexport async function getNFTOwner(metadata) {\r\n  const { name, uri, mint, symbol, royalties } = await getMetadata(\r\n    networkConnection,\r\n    metadata\r\n  );\r\n\r\n  const holders = await networkConnection.getTokenLargestAccounts(mint);\r\n  if (!holders || holders.value.length < 1) {\r\n    throw new Error(\"invalid mint\");\r\n  }\r\n  const { address: splAccount } = holders.value[0];\r\n\r\n  const parsedAccountInfo = await networkConnection.getParsedAccountInfo(\r\n    splAccount\r\n  );\r\n  return {\r\n    nftOwner: parsedAccountInfo?.value?.data?.parsed?.info?.owner,\r\n    name,\r\n    uri,\r\n    mint: mint.toBase58(),\r\n    symbol,\r\n    royalties: royalties,\r\n  };\r\n}\r\n\r\nexport async function getMetadata(connection, publicKey) {\r\n  publicKey = typeof publicKey == Object ? publicKey : new PublicKey(publicKey);\r\n  const accountData = await connection.getAccountInfo(publicKey);\r\n  if (accountData?.owner?.toBase58() !== programIds().metadata.toBase58())\r\n    // throw new Error(\"Account is not owned by Metadata program\");\r\n    return null;\r\n\r\n  const decoded = decodeMetadata(accountData.data);\r\n  // do not display other NFT\r\n  if (decoded.updateAuthority.toBase58() !== creator.toBase58()) return null;\r\n  return {\r\n    metadata: publicKey,\r\n    name: decoded.data.name,\r\n    uri: decoded.data.uri,\r\n    mint: decoded.mint,\r\n    symbol: decoded.data.symbol,\r\n    royalties: decoded.data.sellerFeeBasisPoints,\r\n  };\r\n}\r\n\r\nexport async function getMetadataByMint(tokenMint) {\r\n  const mint =\r\n    typeof tokenMint === \"string\" ? new PublicKey(tokenMint) : tokenMint;\r\n\r\n  return await getMetadata(networkConnection, await getMetadataAccount(mint));\r\n}\r\n\r\n/**\r\n * Get metadata account address derived from Metadata program and token mint address\r\n * @param {PublicKey} tokenMint token mint address\r\n * @returns {PublicKey} derived metadata account address\r\n */\r\nasync function getMetadataAccount(tokenMint) {\r\n  const PROGRAM_IDS = programIds();\r\n\r\n  return (\r\n    await findProgramAddress(\r\n      [\r\n        Buffer.from(METADATA_PREFIX),\r\n        PROGRAM_IDS.metadata.toBuffer(),\r\n        tokenMint.toBuffer(),\r\n      ],\r\n      PROGRAM_IDS.metadata\r\n    )\r\n  )[0];\r\n}\r\n\r\n/**\r\n * Decode encoded metadata\r\n * @param {Buffer} buffer\r\n * @returns {Metadata} decoded metadata\r\n */\r\nexport const decodeMetadata = (buffer) => {\r\n  const metadata = deserializeUnchecked(METADATA_SCHEMA, Metadata, buffer);\r\n  return metadata;\r\n};\r\n\r\nconst findProgramAddress = async (seeds, programId) => {\r\n  const key =\r\n    \"pda-\" +\r\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\r\n    programId.toString();\r\n  let cached = localStorage.getItem(key);\r\n  if (cached) {\r\n    const value = JSON.parse(cached);\r\n\r\n    return [new PublicKey(value.key), parseInt(value.nonce)];\r\n  }\r\n\r\n  const result = await PublicKey.findProgramAddress(seeds, programId);\r\n\r\n  try {\r\n    localStorage.setItem(\r\n      key,\r\n      JSON.stringify({\r\n        key: result[0].toBase58(),\r\n        nonce: result[1],\r\n      })\r\n    );\r\n  } catch {\r\n    // ignore\r\n  }\r\n\r\n  return result;\r\n};\r\n"]}]}