{"remainingRequest":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js!/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js??ref--14-0!/Users/aaronh/Downloads/abstratica-web/src/store/index.js","dependencies":[{"path":"/Users/aaronh/Downloads/abstratica-web/src/store/index.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/babel.config.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/cache-loader/dist/cjs.js","mtime":1693191335836},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js","mtime":1693191336222},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js","mtime":1693191335906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/aaronh/Downloads/abstratica-web/src/store/index.js"],"names":["Vuex","Vue","getMetadataByMint","networkConnection","TOKEN_PROGRAM_ID","sleep","cleanControlChar","groupBy","loadAbsOptimized","getCollectors","use","Store","state","metaReady","abs","rarity","ownedAbs","connectedWallet","newMeta","newMintBadge","getters","s","minted","length","isConnected","mutations","setAbs","payload","setRarity","addAbs","push","Array","isArray","setConnectedWallet","wallet","setOwnedAbs","updateData","addOwnedAbs","addNewMeta","clearNewMeta","splice","removeNewMeta","metaAccount","i","findIndex","n","actions","connect","commit","dispatch","disconnect","refreshTokens","getParsedTokenAccountsByOwner","programId","value","nft","map","t","account","data","d","mint","parsed","info","amount","parseInt","tokenAmount","decimals","filter","m","currentMetaCheck","checkCurrentMeta","notFound","c","foundIdx","newAbs","index","newToken","metadata","toBase58","name","uri","symbol","a","loadAbs","decodedData","nonceOrder","_bn","words","absItem","find","r","type","sort","b","rank","calculateRarityData","context","groupedBySymbol","groupedData","entries","entry","rarityData","count","getCollectorData","tokenData"],"mappings":"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","sourcesContent":["import Vuex from \"vuex\";\r\nimport Vue from \"vue\";\r\nimport { getMetadataByMint } from \"../lib/metadata-helper/metadata\";\r\nimport { networkConnection, TOKEN_PROGRAM_ID } from \"../lib/connection\";\r\nimport { sleep, cleanControlChar, groupBy } from \"../lib/util\";\r\nimport { loadAbsOptimized } from \"../lib/metadata-helper/metadata2\";\r\nimport getCollectors from \"../api/collectors\";\r\n\r\nVue.use(Vuex);\r\n\r\n// IMPORTANT keep data simple\r\nexport default new Vuex.Store({\r\n  state: {\r\n    metaReady: false,\r\n    abs: [],\r\n    rarity: [],\r\n    // ownedMint: [],\r\n    ownedAbs: [],\r\n    connectedWallet: null,\r\n    newMeta: [],\r\n    newMintBadge: 0,\r\n  },\r\n  getters: {\r\n    metaReady: (s) => s.metaReady,\r\n    minted: (state) => {\r\n      return state.abs?.length || 0;\r\n    },\r\n    // ownedMint: (s) => s.ownedMint,\r\n    ownedAbs: (s) => s.ownedAbs || [],\r\n    newMintBadge: (s) => s.newMeta.length || 0,\r\n    newMeta: (s) => s.newMeta || [],\r\n    connectedWallet: (s) => s.connectedWallet,\r\n    isConnected: (s) => !!s.connectedWallet,\r\n  },\r\n  mutations: {\r\n    metaReady(state) {\r\n      state.metaReady = true;\r\n    },\r\n    setAbs(state, payload) {\r\n      state.abs = payload;\r\n    },\r\n    setRarity(state, payload) {\r\n      state.rarity = payload;\r\n    },\r\n    addAbs(state, payload) {\r\n      state.abs.push(...(Array.isArray(payload) ? payload : [payload]));\r\n    },\r\n    setConnectedWallet(state, wallet) {\r\n      state.connectedWallet = wallet;\r\n    },\r\n    setOwnedAbs(state, payload) {\r\n      const updateData = Array.isArray(payload) ? payload : [payload];\r\n      state.ownedAbs = updateData;\r\n    },\r\n    addOwnedAbs(state, payload) {\r\n      const updateData = Array.isArray(payload) ? payload : [payload];\r\n      state.ownedAbs.push(...updateData);\r\n    },\r\n    addNewMeta(state, payload) {\r\n      const updateData = Array.isArray(payload) ? payload : [payload];\r\n      state.newMeta.push(...updateData);\r\n    },\r\n    clearNewMeta(state) {\r\n      state.newMeta.splice(0);\r\n    },\r\n    removeNewMeta(state, metaAccount) {\r\n      const i = state.newMeta.findIndex((n) => n === metaAccount);\r\n      if (i > -1) state.newMeta.splice(i, 1);\r\n    },\r\n  },\r\n  actions: {\r\n    async connect({ commit, dispatch }, payload) {\r\n      commit(\"setConnectedWallet\", payload);\r\n      await dispatch(\"refreshTokens\");\r\n    },\r\n    disconnect({ commit }) {\r\n      commit(\"setConnectedWallet\", null);\r\n      // commit(\"setOwnedMint\", []);\r\n      commit(\"setOwnedAbs\", []);\r\n      commit(\"clearNewMeta\");\r\n    },\r\n    // TODO: add rebounce\r\n    async refreshTokens({ commit, getters, state }) {\r\n      if (!getters.isConnected) {\r\n        commit(\"setOwnedAbs\", []);\r\n        return;\r\n      }\r\n\r\n      const { value } = await networkConnection.getParsedTokenAccountsByOwner(\r\n        getters.connectedWallet,\r\n        { programId: TOKEN_PROGRAM_ID }\r\n      );\r\n\r\n      // get token with NFT signature\r\n      const nft = value\r\n        .map((t) => {\r\n          return t.account.data;\r\n        })\r\n        .map((d) => {\r\n          return {\r\n            mint: d.parsed?.info?.mint,\r\n            amount: parseInt(d.parsed?.info?.tokenAmount?.amount),\r\n            decimals: parseInt(d.parsed?.info?.tokenAmount?.decimals),\r\n          };\r\n        })\r\n        .filter((m) => m.amount === 1 && m.decimals === 0);\r\n\r\n      // check NFT against current all abs\r\n      // console.log(nft);\r\n      const currentMetaCheck = checkCurrentMeta(state.abs, nft);\r\n      // not found in current all abs\r\n      const notFound = currentMetaCheck.filter((c) => c.foundIdx === -1);\r\n      // console.log(notFound);\r\n      // check if notFound is actually abs\r\n      const newAbs = [];\r\n      for (let index = 0; index < notFound.length; index++) {\r\n        const newToken = notFound[index];\r\n        const newMeta = await getMetadataByMint(newToken.mint);\r\n        if (newMeta)\r\n          newAbs.push({\r\n            metadata: newMeta.metadata.toBase58(),\r\n            name: newMeta.name,\r\n            uri: newMeta.uri,\r\n            mint: newMeta.mint.toBase58(),\r\n            symbol: newMeta.symbol,\r\n          });\r\n        await sleep(1000);\r\n      }\r\n\r\n      if (newAbs.length > 0) {\r\n        commit(\r\n          \"addNewMeta\",\r\n          newAbs.map((a) => a.metadata)\r\n        );\r\n      }\r\n      //push new abs meta\r\n      commit(\"addAbs\", newAbs);\r\n      // reconstruct current owned abs\r\n      commit(\"setOwnedAbs\", [\r\n        ...currentMetaCheck\r\n          .filter((c) => c.foundIdx > -1)\r\n          .map((c) => state.abs[c.foundIdx]),\r\n        ...newAbs,\r\n      ]);\r\n    },\r\n    // main load data\r\n    async loadAbs({ commit, dispatch }) {\r\n      // const abs2 = await loadAbsOptimized();\r\n      // return;\r\n      const abs = (await loadAbsOptimized())\r\n        .filter((a) => {\r\n          return a.decodedData.data?.name && a.decodedData.data?.uri;\r\n        })\r\n        .map((a) => {\r\n          return {\r\n            name: cleanControlChar(a.decodedData.data.name),\r\n            uri: cleanControlChar(a.decodedData.data.uri),\r\n            mint: a.decodedData.mint.toBase58(),\r\n            nonceOrder: a.decodedData.mint._bn.words[1],\r\n            metadata: a.metadata,\r\n            symbol: cleanControlChar(a.decodedData.data.symbol),\r\n          };\r\n        });\r\n\r\n      const rarity = await dispatch(\"calculateRarityData\", abs);\r\n\r\n      // attach rarity\r\n      for (let index = 0; index < abs.length; index++) {\r\n        const absItem = abs[index];\r\n        absItem.rarity = rarity.find((r) => r.type === absItem.symbol).rarity;\r\n      }\r\n      // re-order by rarity & mint nonce\r\n      abs.sort((a, b) => {\r\n        if (a.rarity - b.rarity !== 0) {\r\n          return a.rarity - b.rarity;\r\n        }\r\n        return a.nonceOrder - b.nonceOrder;\r\n      });\r\n      // attach rank number\r\n      for (let index = 0; index < abs.length; index++) {\r\n        const absItem = abs[index];\r\n        absItem.rank = index + 1;\r\n      }\r\n      commit(\"setRarity\", rarity);\r\n      commit(\"setAbs\", abs);\r\n      commit(\"metaReady\");\r\n    },\r\n\r\n    calculateRarityData(context, metadata) {\r\n      const groupedBySymbol = groupBy(metadata, (t) => t.symbol);\r\n      const groupedData = [];\r\n      for (const entry of groupedBySymbol.entries()) {\r\n        const rarityData = {\r\n          type: entry[0],\r\n          count: entry[1].length,\r\n          rarity: (entry[1].length / metadata.length) * 100,\r\n        };\r\n        // rarityData.rating = (100 - rarityData.rarity) * 76;\r\n        groupedData.push(rarityData);\r\n      }\r\n      return groupedData;\r\n    },\r\n\r\n    async getCollectorData() {\r\n      return await getCollectors();\r\n    },\r\n  },\r\n});\r\n\r\nfunction checkCurrentMeta(abs, tokenData) {\r\n  return tokenData.map((n) => {\r\n    return {\r\n      mint: n.mint,\r\n      foundIdx: abs.findIndex((a) => {\r\n        return a.mint === n.mint;\r\n      }),\r\n    };\r\n  });\r\n}\r\n"]}]}