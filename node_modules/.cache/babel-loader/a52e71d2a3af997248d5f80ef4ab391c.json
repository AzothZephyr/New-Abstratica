{"remainingRequest":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js!/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js??ref--14-0!/Users/aaronh/Downloads/abstratica-web/src/lib/name-service.js","dependencies":[{"path":"/Users/aaronh/Downloads/abstratica-web/src/lib/name-service.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/babel.config.js","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/cache-loader/dist/cjs.js","mtime":1693191335836},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/babel-loader/lib/index.js","mtime":1693191336222},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/eslint-loader/index.js","mtime":1693191335906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/aaronh/Downloads/abstratica-web/src/lib/name-service.js"],"names":["networkConnection","PublicKey","BN","getHandleAndRegistryKey","getHashedName","getNameAccountKey","NameRegistryState","NAME_PROGRAM_ID","getFilteredProgramAccounts","SolDomainExtention","SOL_TLD_AUTHORITY","PROGRAM_ID","getAllRegisteredInfo","wallet","twitterOnly","getTwitterHandle","getUserDomains","twitter","domain","walletKey","reg","findOwnedNameAccountsForUser","domains","length","performReverseLookup","name","connection","nameAccount","findProgramAddress","toBuffer","centralState","toBase58","hashedReverseLookup","reverseLookupAccount","retrieve","data","Error","nameLength","slice","toNumber","toString","userAccount","filters","memcmp","offset","bytes","accounts","map","a","publicKey"],"mappings":"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","sourcesContent":["import { networkConnection } from \"./connection\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport {\n  getHandleAndRegistryKey,\n  getHashedName,\n  getNameAccountKey,\n  NameRegistryState,\n  NAME_PROGRAM_ID,\n  getFilteredProgramAccounts,\n} from \"@solana/spl-name-service\";\n\nexport const SolDomainExtention = \"sol\";\n// Address of the SOL TLD\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\nexport const PROGRAM_ID = new PublicKey(\n  \"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\"\n);\n\nexport async function getAllRegisteredInfo(wallet, twitterOnly = false) {\n  return {\n    twitter: await getTwitterHandle(wallet),\n    domain: twitterOnly ? null : await getUserDomains(wallet),\n  };\n}\nexport async function getTwitterHandle(wallet) {\n  try {\n    const walletKey = new PublicKey(wallet);\n    const reg = await getHandleAndRegistryKey(networkConnection, walletKey);\n\n    if (!reg) return null;\n    return `${reg[0]}`;\n  } catch (e) {\n    // console.log(\"unable to get Twittler handle\");\n  }\n  return null;\n}\nexport async function getUserDomains(wallet) {\n  try {\n    const walletKey = new PublicKey(wallet);\n    const domains = await findOwnedNameAccountsForUser(walletKey);\n    if (!domains || domains.length == 0) return null;\n    // just take the first one\n    const name = await performReverseLookup(networkConnection, domains[0]);\n    if (!name) return null;\n    return `${name}.${SolDomainExtention}`;\n  } catch (e) {\n    // console.log(e);\n    // console.log(\"unable to get domain handle\");\n  }\n  return null;\n}\n\nexport async function performReverseLookup(connection, nameAccount) {\n  let [centralState] = await PublicKey.findProgramAddress(\n    [PROGRAM_ID.toBuffer()],\n    PROGRAM_ID\n  );\n  let hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n  let reverseLookupAccount = await getNameAccountKey(\n    hashedReverseLookup,\n    centralState\n  );\n\n  let name = await NameRegistryState.retrieve(connection, reverseLookupAccount);\n  if (!name.data) {\n    throw new Error(\"Could not retrieve name data\");\n  }\n  let nameLength = new BN(name.data.slice(0, 4), \"le\").toNumber();\n  return name.data.slice(4, 4 + nameLength).toString();\n}\n\nasync function findOwnedNameAccountsForUser(userAccount) {\n  const filters = [\n    {\n      memcmp: {\n        offset: 32,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n  const accounts = await getFilteredProgramAccounts(\n    networkConnection,\n    NAME_PROGRAM_ID,\n    filters\n  );\n  return accounts.map((a) => a.publicKey);\n}\n"]}]}