{"remainingRequest":"/Users/aaronh/Downloads/abstratica-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aaronh/Downloads/abstratica-web/src/App.vue?vue&type=style&index=0&id=7ba5bd90&scoped=true&lang=scss&","dependencies":[{"path":"/Users/aaronh/Downloads/abstratica-web/src/App.vue","mtime":1653334282000},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/css-loader/dist/cjs.js","mtime":1693191336063},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1693191336554},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/postcss-loader/src/index.js","mtime":1693191336210},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/sass-loader/dist/cjs.js","mtime":1693191335793},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/cache-loader/dist/cjs.js","mtime":1693191335836},{"path":"/Users/aaronh/Downloads/abstratica-web/node_modules/vue-loader/lib/index.js","mtime":1693191336374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiLi9zY3NzL2dsb2JhbC5zY3NzIjsKQGltcG9ydCAiLi9zY3NzL3ZhcmlhYmxlcy5zY3NzIjsKQGltcG9ydCAiLi9zY3NzL2VmZmVjdHMuc2NzcyI7CgoubmF2LXRhYnMgewogIG1heC13aWR0aDogODAwcHg7Cn0KLm5hdi10YWJzIHsKICA6OnYtZGVlcCAudi10YWJzLWJhciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYWJzLWRhcmstYmcgIWltcG9ydGFudDsKICB9Cn0KCi5pY29uLWluYWN0aXZlLWZpeCB7CiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42KTsKfQoKLm1pbnQtYnRuIHsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50OwogIGJveC1zaGFkb3c6IDAgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app>\n    <v-app-bar app color=\"grey darken-4\" dark flat>\n      <v-app-bar-nav-icon\n        @click.stop=\"drawer = !drawer\"\n        class=\"d-xs-block d-sm-block d-md-none d-lg-none d-xl-none\"\n      ></v-app-bar-nav-icon>\n      <v-container fluid>\n        <v-row>\n          <v-col cols=\"5\" sm=\"4\" md=\"2\" lg=\"2\" xl=\"2\">\n            <div class=\"align-center d-flex fill-height\">\n              <v-img\n                :alt=\"name\"\n                class=\"shrink ma-0 pa-0 d-none d-md-block d-lg-block d-xl-block\"\n                contain\n                src=\"/logo_gradient.png\"\n                width=\"40\"\n              />\n              <router-link\n                :to=\"{ path: '/home' }\"\n                class=\"no-text-decor inherit-color\"\n              >\n                <h4 class=\"app-name ml-sm-0 ml-xs-0 ml-md-2 ml-lg-2 ml-xl-2\">\n                  {{ name }}\n                </h4>\n              </router-link>\n            </div>\n          </v-col>\n\n          <v-col xl=\"8\" lg=\"8\" md=\"8\" sm=\"2\" class=\"pa-0 align-center\">\n            <div\n              class=\"\n                text-center\n                d-none d-md-block d-lg-block d-xl-block\n                fill-height\n              \"\n            >\n              <v-tabs\n                :value=\"currentTab\"\n                @change=\"onTabChange\"\n                grow\n                centered\n                center-active\n                height=\"64\"\n                class=\"d-block fill-height nav-tabs mx-auto\"\n              >\n                <template v-for=\"(item, i) in nav\">\n                  <v-tab\n                    :disabled=\"item.disabled\"\n                    :key=\"i\"\n                    :to=\"!item.target ? item.path : ''\"\n                    :href=\"item.target ? item.href : ''\"\n                    :target=\"item.target || ''\"\n                  >\n                    <template v-if=\"item.name == 'my collection'\">\n                      <v-badge\n                        dark\n                        :value=\"walletConnected && newMintBadge > 0\"\n                        inline\n                        :content=\"newMintBadge\"\n                        color=\"secondary\"\n                      >\n                        <!-- badge wrap cause inactive icon color to stay active -->\n                        <v-icon\n                          left\n                          :class=\"[\n                            'text-capitalize d-md-none d-lg-inline-block d-xl-inline-block mb-1',\n                            currentView !== 'mycollection'\n                              ? 'icon-inactive-fix'\n                              : '',\n                          ]\"\n                          >{{ item.icon }}</v-icon\n                        >\n                        {{ item.name }}\n                      </v-badge>\n                      <!-- newMintBadge > 0 && currentView !== 'mycollection' -->\n                    </template>\n                    <template v-else>\n                      <v-icon\n                        left\n                        class=\"\n                          text-capitalize\n                          d-md-none d-lg-inline-block d-xl-inline-block\n                          mb-1\n                        \"\n                        >{{ item.icon }}</v-icon\n                      >\n                      {{ item.name }}\n                    </template>\n                  </v-tab>\n                </template>\n              </v-tabs>\n            </div>\n          </v-col>\n\n          <v-col cols=\"7\" sm=\"6\" md=\"2\" lg=\"2\" xl=\"2\">\n            <WalletButton\n              :lamports=\"lamports\"\n              :address=\"connectedWalletKey\"\n              :network=\"network\"\n              @connect=\"openWalletDialog\"\n              @disconnect=\"disconnectWallet\"\n            />\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-app-bar>\n    <MintedStatus\n      :minted=\"minted\"\n      :max=\"maxMint\"\n      v-show=\"1 == 0 && !$vuetify.breakpoint.mobile\"\n    />\n    <v-btn\n      class=\"mint-btn bn5\"\n      fab\n      x-large\n      dark\n      fixed\n      bottom\n      right\n      text\n      :ripple=\"false\"\n      @click=\"onMintClicked\"\n    >\n      <v-icon class=\"z-1000 bn5-icon\">mdi-wallet-plus</v-icon>\n    </v-btn>\n\n    <SideDrawer v-model=\"drawer\" :name=\"name\" :nav=\"nav\" />\n    <v-main>\n      <keep-alive>\n        <router-view :app-name=\"name\"></router-view>\n      </keep-alive>\n    </v-main>\n    <MintDialog\n      v-model=\"mintDialog\"\n      v-show=\"walletConnected\"\n      :minted=\"minted\"\n      :max=\"maxMint\"\n      :price=\"mintPriceLamports\"\n      :balance=\"walletLamports\"\n      :loading=\"submitingMint\"\n      :allowMint=\"allowMint\"\n      @mint=\"onMintRequest\"\n    />\n    <WalletDialog v-model=\"walletDialog\" @connect=\"onConnect\" />\n    <v-snackbar v-model=\"snackbar\" top right :timeout=\"3000\">\n      {{ snackbarMessage }}\n    </v-snackbar>\n  </v-app>\n</template>\n<script>\n/* eslint-disable no-unused-vars */\nimport WalletDialog from \"./components/WalletDialog.vue\";\nimport WalletButton from \"./components/WalletButton.vue\";\nimport SideDrawer from \"./components/SideDrawer.vue\";\nimport walletFac from \"./lib/wallet/wallet-factory\";\nimport MintedStatus from \"./components/MintedStatus.vue\";\nimport MintDialog from \"./components/MintDialog.vue\";\nimport { network, networkConnection, creator } from \"./lib/connection\";\nimport { mapActions, mapGetters } from \"vuex\";\nimport { sleep, toDisplayAmount } from \"./lib/util\";\nimport { MAX_MINT, MINT_PRICE, ENABLE_MINT } from \"./lib/settings\";\nimport { createMintRequestTranscation } from \"./lib/transaction\";\n\nvar Wallet = null;\n\nexport default {\n  name: \"App\",\n  components: {\n    WalletDialog,\n    WalletButton,\n    SideDrawer,\n    MintedStatus,\n    MintDialog,\n  },\n  computed: {\n    ...mapGetters([\"minted\", \"connectedWallet\", \"isConnected\", \"newMintBadge\"]),\n\n    lamports() {\n      return this.accountInfo?.lamports || 0;\n    },\n    walletSol() {\n      return toDisplayAmount(this.accountInfo?.lamports || 0);\n    },\n    walletLamports() {\n      return this.accountInfo?.lamports || 0;\n    },\n    walletConnected() {\n      return this.isConnected;\n    },\n    currentView() {\n      return (this.$route.name || \"\").toLowerCase();\n    },\n    network() {\n      return network;\n    },\n    maxMint() {\n      return MAX_MINT;\n    },\n    mintPriceLamports() {\n      return MINT_PRICE;\n    },\n    allowMint() {\n      return ENABLE_MINT;\n    },\n    mintPriceSol() {\n      return toDisplayAmount(this.mintPriceLamports);\n    },\n    connectedWalletKey() {\n      return this.connectedWallet;\n    },\n  },\n  async created() {\n    await this.loadAbs();\n    // await this.startPollingNewMint();\n  },\n  // clean up\n  beforeDestroy() {\n    if (this.newMintPoolingHandle) clearInterval(this.newMintPoolingHandle);\n  },\n  data: () => ({\n    name: \"Abstratica\",\n    // wallet\n    accountChangeHandle: 0,\n    accountInfo: null,\n\n    mintDialog: false,\n    submitingMint: false,\n\n    // component stuff\n    snackbar: false,\n    snackbarMessage: \"\",\n    // snackbarType: \"primary\", // default color looks too ugly\n    drawer: false,\n    walletDialog: false,\n\n    nav: [\n      {\n        name: \"home\",\n        disabled: false,\n        path: \"/home\",\n        icon: \"mdi-home\",\n      },\n      {\n        name: \"my collection\",\n        disabled: false,\n        path: \"/collection\",\n        icon: \"mdi-image-multiple\",\n      },\n      {\n        name: \"explore\",\n        disabled: false,\n        path: \"/explore\",\n        icon: \"mdi-compass\",\n      },\n      {\n        name: \"codex\",\n        disabled: false,\n        path: \"/codex\",\n        icon: \"mdi-book-open-page-variant\",\n      },\n      {\n        name: \"marketplace\",\n        disabled: false,\n        target: \"_blank\",\n        href: \"https://digitaleyes.market/collections/Abstratica\",\n        icon: \"mdi-shopping\",\n      },\n    ],\n    newMintPollInterval: 5000,\n    newMintPoolingHandle: 0,\n    isPooling: false,\n    previousTab: \"/home\",\n    currentTab: \"/home\",\n    allowTabs: [\"/home\", \"/explore\", \"/codex\", \"/collection\"],\n  }),\n  methods: {\n    ...mapActions([\"loadAbs\", \"connect\", \"disconnect\", \"refreshTokens\"]),\n    async startPollingNewMint() {\n      this.newMintPoolingHandle = setInterval(async () => {\n        if (!this.walletConnected || this.isPooling) return;\n        await this.updateWalletSpl();\n      }, this.newMintPollInterval);\n    },\n    async updateWalletSpl() {\n      this.isPooling = true;\n      try {\n        await this.refreshTokens();\n      } catch (e) {\n        await sleep(2000);\n        console.log(\"update wallet info error\");\n      } finally {\n        this.isPooling = false;\n      }\n    },\n    updateSolBalance(info) {\n      this.accountInfo.lamports = info.lamports;\n    },\n    async onConnect(walletName) {\n      Wallet = await walletFac(walletName, network);\n\n      Wallet.on(\"connect\", async () => await this.onWalletConnectCb());\n      Wallet.on(\"disconnect\", this.onWalletDisconnectCb);\n      Wallet.on(\"error\", (e) => {\n        if (e.name == \"WalletNotFoundError\") {\n          this.showSnackBar(`Could not connect to ${walletName}`);\n        }\n        console.log(\"wallet connect canceled\");\n      });\n\n      Wallet.connect();\n    },\n    async onWalletConnectCb() {\n      try {\n        this.connect(Wallet.publicKey);\n        this.accountChangeHandle = networkConnection.onAccountChange(\n          Wallet.publicKey,\n          this.updateSolBalance\n        );\n\n        // no need to wait for this\n        this.accountInfo = await networkConnection.getAccountInfo(\n          this.connectedWalletKey\n        );\n        this.showSnackBar(\"Wallet connected.\", \"success\");\n        this.walletDialog = false;\n      } catch {\n        console.log(\"wallet connect canceled\");\n      }\n    },\n    onWalletDisconnectCb() {\n      networkConnection.removeAccountChangeListener(this.accountChangeHandle);\n      this.disconnect();\n      this.showSnackBar(\"Wallet disconnected.\", \"success\");\n      this.mintDialog = false;\n    },\n    openWalletDialog() {\n      this.walletDialog = true;\n    },\n    disconnectWallet() {\n      Wallet.disconnect();\n      this.disconnect();\n    },\n\n    showSnackBar(message, type = \"primary\") {\n      this.snackbar = true;\n      this.snackbarMessage = message;\n      // this.snackbarType = type;\n    },\n    onResize() {\n      this.drawer = false;\n    },\n    onMintClicked() {\n      if (!this.walletConnected) {\n        this.walletDialog = true;\n        return;\n      }\n      this.mintDialog = true;\n    },\n    async onTabChange(clickedTab) {\n      // console.log(clickedTab);\n      const isAllow =\n        this.allowTabs.findIndex(\n          (t) => t.toLowerCase() === clickedTab.toLowerCase()\n        ) !== -1;\n      this.currentTab = clickedTab;\n      await this.$nextTick();\n      if (!isAllow) this.currentTab = this.previousTab;\n      else this.previousTab = this.currentTab;\n    },\n\n    async onMintRequest() {\n      if (!this.allowMint) return;\n      // craft tran\n      this.submitingMint = true;\n      try {\n        const trans = await createMintRequestTranscation(\n          networkConnection,\n          this.connectedWalletKey,\n          creator,\n          this.mintPriceLamports\n        );\n\n        const signed = await Wallet.signTransaction(trans);\n        // console.log(trans);\n        const confirmed = await networkConnection.sendRawTransaction(\n          signed.serialize(),\n          {\n            skipPreflight: true,\n            preflightCommitment: \"confirmed\",\n          }\n        );\n\n        this.showSnackBar(\n          `Transaction sent: ${confirmed.substring(0, 16)}...`,\n          \"success\"\n        );\n      } finally {\n        this.submitingMint = false;\n      }\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n@import \"./scss/global.scss\";\n@import \"./scss/variables.scss\";\n@import \"./scss/effects.scss\";\n\n.nav-tabs {\n  max-width: 800px;\n}\n.nav-tabs {\n  ::v-deep .v-tabs-bar {\n    background-color: $abs-dark-bg !important;\n  }\n}\n\n.icon-inactive-fix {\n  color: rgba(255, 255, 255, 0.6);\n}\n\n.mint-btn {\n  background: transparent !important;\n  box-shadow: 0 !important;\n}\n</style>\n"]}]}